url1 <- "<script src="https://gist.github.com/anonymous/ffea80cdae9bc1e6b5017e1cb9b72942.js"></script>"
knitr::opts_chunk$set(echo = FALSE)
library(httr)
library(rlist)
library(rjstat)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(corrplot)
```
##I had some serious trouble whit understanding how to recode the original time code in the dataplot. I had to consult whit a forum and another student to find a code that worked, it was a lot harder than I thought .
url1 <- "<script src="https://gist.github.com/anonymous/ffea80cdae9bc1e6b5017e1cb9b72942.js"></script>"
d.tmp <- GET(url1)
sbtabell <- fromJSONstat(content(d.tmp, "text"))
knitr::opts_chunk$set(echo = FALSE)
library(httr)
library(rlist)
library(rjstat)
library(dplyr)
library(zoo)
library(lubridate)
library(ggplot2)
library(corrplot)
url1 <- "http://data.ssb.no/api/v0/dataset/95274.json?lang=no"
d.tmp <- GET(url1)
sbtabell <- fromJSONstat(content(d.tmp, "text"))
byCity <- sbtabell [[1]]
url2 <- "http://data.ssb.no/api/v0/dataset/95276.json?lang=no"
b.tmp <- GET(url2)
sbtabel2 <- fromJSONstat(content(d.tmp, "text"))
byCountry <- sbtabel2 [[1]]
alldata <- rbind(byCity, byCountry)
alldata <- rename(alldata, "Region"="region" , "Date"="mÃ¥ned" , "Variable"="statistikkvariabel", "Value"="value")
alldata$Date <- as.Date(as.yearmon(alldata$Date, "%YM%m"))
alldata$Variable <- recode(alldata$Variable, "Kapasitetsutnytting av senger (prosent)" = "Beds percentage capacity utilization", "Kapasitetsutnytting av rom (prosent)" =
"Rooms percentage capacity utilization", "Pris per rom (kr)" = "Price per room")
roomprice <- alldata [seq(3, nrow(alldata), 3), ]
diffcounty <- roomprice %>%
group_by(Region) %>%
summarise(averageprice = mean(Value[which(Value!=0.0)]))
maxdiff <- max(diffcounty$averageprice)
which.max(diffcounty$averageprice)
mindiff <- min(diffcounty$averageprice)
which.min(diffcounty$averageprice)
paste("The county that has the lowest room price is Oppland, with an average price of", mindiff , "NOK. The county whit the highest room price is Svalbard, with an average price of", maxdiff, "NOK" )
diffyear <- roomprice %>%
mutate(Year=year(Date)) %>%
filter(Value > 0.0) %>%
group_by(Region, Year) %>%
summarise(averageprice =mean(Value, na.rm = TRUE))
maximum <- max(diffyear$averageprice)
which.max(diffyear$averageprice)
minimum <- min(diffyear$averageprice)
which.min(diffyear$averageprice)
paste("The county that has the lowest room price is Hedmark, with an average price of", minimum , "NOK, in the year 1992. The county whit the highest price is Svalbard, with an average price of", maximum, "NOK, in the year 2019" )
difftroms <- roomprice %>%
filter(Region == "Troms - Romsa", Date >= "1999-01-01" & Date <= "2019-07-01") %>% group_by(Date)
difftromsPlot <- ggplot(difftroms, aes(x=Date, y=Value)) + geom_point() + geom_line() + ggtitle("Price pr. room from 99' to 19'")
print(difftromsPlot)
paste("As we can see from the graf, the price has gradually increased over the last 10 years")
correlation1 = alldata[seq(2, nrow(alldata), 3), ]
correlation1 <- correlation1 %>%
filter(Date >= "2010-01-01" & Date <= "2019-07-01") %>%
group_by(Value)
correlation2 <- roomprice %>%
filter(Date >= "2010-01-01" & Date <= "2019-07-01") %>%
group_by(Value)
x <- correlation1 [4]
y <- correlation2 [4]
correlation <- cor(x,y)
correlation
paste("When we run the code we can see that we get a correlation equal to", correlation, ".As this number is close to 1, means that there is somewhat of a correlation between room capacity and prices since January 2010.")
require(RMySQL) || {install.packages("RMySQL"); require(RMySQL)}
require(RMySQL) || {install.packages("RMySQL"); require(RMySQL)}
con<-dbConnect(RMySQL::MySQL(),
host      = "titlon.uit.no",
user      = "mar077@uit.no",
password  = "ZOfw@5goXdOAsNhQ$vpbv",
db        = "OSE")
dbListTables(con)
dbListFields(con,"equity")
rs = dbSendQuery(con, "SELECT * FROM equity WHERE Name='Equinor'")
titlon_data=fetch(rs,-1)
require(RMySQL) || {install.packages("RMySQL"); require(RMySQL)}
con <- dbConnect(RMySQL::MySQL(),
host      = "titlon.uit.no",
user      = "mar077@uit.no",
password  = "ZOfw@5goXdOAsNhQ$vpbv",
db        = "OSE")
dbListTables(con)
dbListFields(con,"equity")
rs = dbSendQuery(con, "SELECT * FROM equity WHERE Name='Equinor'")
titlon_data = fetch(rs,-1)
library(tidyverse)
?fetch()
?fetch
View(con)
View(con)
browseURL("https://rviews.rstudio.com/2017/05/17/databases-using-r/")
#' A very useful function in DBI is dbListTables(), which retrieves the names of available tables.
#' In this case "con"
dbListTables(con)
#' Another useful function is the dbListFields, which returns a vector with all of the column names in a table.
dbListFields(con, "equity")
#' How many rows of data is there?
tally(tbl(con, "equity")) # could be useful to know before loading the data locally
#' Now that we've copied the data, we can use tbl() to take a reference to it:
#' This is probably the most important function so far.
equity <- tbl(con, "equity")
equity
#' How many sectors are there?
sectors <- equity %>% select(Sector) %>% collect()
fct_count(sectors$Sector)
#' Number of obsevations per symbol
table <- fct_count(names$Symbol)
#' Now that we've copied the data, we can use tbl() to take a reference to it:
#' This is probably the most important function so far.
equity <- tbl(con, "equity")
equity
#' We can now use dplyr lingo on this database object, end with collect() to retrieve data locally
names <- equity %>% select(Symbol, Name) %>% collect()
unique(names$Name)
#' Finding a specific Symbol
names %>% filter(Name=="Equinor")
#' Number of obsevations per symbol
table <- fct_count(names$Symbol)
table
#' How many sectors are there?
sectors <- equity %>% select(Sector) %>% collect()
fct_count(sectors$Sector)
#' When used against a database, the previous function is converted to a SQL query that works with MS SQL Server.
#' The `show_query()`` function displays the translation.
show_query(tally(tbl(con, "equity")))
#' 1) Use the "bonds" table.
bonds <- tbl(con, "bonds")
equity
bonds
#' Finding a specific Symbol
names %>% filter(Name=="Equinor")
unique(names$Name)
equity
#' Another useful function is the dbListFields, which returns a vector with all of the column names in a table.
dbListFields(con, "equity")
#' a) What are the variables in the "bonds" table?
dbListFields(con, "bonds")
equity
#' Number of obsevations per symbol
table <- fct_count(names$Symbol)
table
#' How many sectors are there?
sectors <- equity %>% select(Sector) %>% collect()
fct_count(sectors$Sector)
#' Number of obsevations per symbol
table <- fct_count(names$Symbol)
require(RMySQL) || {install.packages("RMySQL"); require(RMySQL)}
con <- dbConnect(RMySQL::MySQL(),
host      = "titlon.uit.no",
user      = "mar077@uit.no",
password  = "ZOfw@5goXdOAsNhQ$vpbv",
db        = "OSE")
dbListTables(con)
dbListFields(con,"equity")
rs = dbSendQuery(con, "SELECT * FROM equity WHERE Name='Equinor'")
titlon_data = fetch(rs,-1)
# ---------------------------------------------------------------------------
library(tidyverse)
?fetch
#' Congratulations, you are now connected to Titlon, and are ready to run SQL queries.
#' Our connection is labelled `con`.
browseURL("https://rviews.rstudio.com/2017/05/17/databases-using-r/")
browseURL("https://db.rstudio.com/dplyr/")
#' A very useful function in DBI is dbListTables(), which retrieves the names of available tables.
#' In this case "con"
dbListTables(con)
#' Another useful function is the dbListFields, which returns a vector with all of the column names in a table.
dbListFields(con, "equity")
#' How many rows of data is there?
tally(tbl(con, "equity")) # could be useful to know before loading the data locally
#' Now that we've copied the data, we can use tbl() to take a reference to it:
#' This is probably the most important function so far.
equity <- tbl(con, "equity")
equity
#' We can now use dplyr lingo on this database object, end with collect() to retrieve data locally
names <- equity %>% select(Symbol, Name) %>% collect()
unique(names$Name)
#' Finding a specific Symbol
names %>% filter(Name=="Equinor")
#' Number of obsevations per symbol
table <- fct_count(names$Symbol)
table
#' How many sectors are there?
sectors <- equity %>% select(Sector) %>% collect()
fct_count(sectors$Sector)
fct_count(sectors$Sector)
#' b) How many observations is there in the "bonds" table?
sectors <- bonds %>% select(Sector) %>% collect()
#' b) How many observations is there in the "bonds" table?
table <- fct_count(names$Symbol)
table
sectors <- bonds %>% select(Sector) %>% collect()
fct_count(sectors$Sector)
#' We can now use dplyr lingo on this database object, end with collect() to retrieve data locally
names <- equity %>% select(Symbol, Name) %>% collect()
unique(names$Name)
#' Number of obsevations per symbol
table <- fct_count(names$Symbol)
table
bonds
#' 1) Use the "bonds" table.
bonds <- tbl(con, "bonds")
bonds
View(bonds)
#' a) What are the variables in the "bonds" table?
dbListFields(con, "bonds")
#' b) How many observations is there in the "bonds" table?
tally(tbl(con, "bonds"))
equity
unique(names$Name)
#' Finding a specific Symbol
names %>% filter(Name=="Equinor")
#' c) Download the bonds table only for EqName "Norsk Hydro".
name <- bonds %>% select(Symbol, Name) %>% collect()
unique(name$Name)
name %>% filter(Name=="Norsk Hydro")
#' c) Download the bonds table only for EqName "Norsk Hydro".
name %>% filter(Name=="Norsk Hydro")
View(name)
#' c) Download the bonds table only for EqName "Norsk Hydro".
name %>% filter(Name=="Norsk Hydro")
#' c) Download the bonds table only for EqName "Norsk Hydro".
Hydro <- bonds %>% select(Symbol, Name) %>% collect()
unique(Hydro$Name)
#' Finding a specific Symbol
Hydro %>% filter(Name=="Norsk Hydro")
Hydro %>% filter(Name=="Norsk Hydro")
View(Hydro)
View(names)
View(names)
View(names)
View(rs)
View(names)
View(name)
View(Hydro)
View(Hydro)
#' c) Download the bonds table only for EqName "Norsk Hydro".
hydro <- bonds %>% select(Symbol, Name) %>% collect()
unique(hydro$Name)
hydro %>% filter(Name=="Norsk Hydro")
View(hydro)
View(name)
View(names)
#' When used against a database, the previous function is converted to a SQL query that works with MS SQL Server.
#' The `show_query()`` function displays the translation.
show_query(tally(tbl(con, "equity")))
#' c) Download the bonds table only for EqName "Norsk Hydro".
hydro <- bonds %>% select(Symbol, Name) %>% collect("Norsk Hydro")
unique(hydro$Name)
hydro %>% filter(Name=="Norsk Hydro")
hydro
View(hydro)
hydro %>% filter(Name == "Norsk Hydro")
?collect
#' c) Download the bonds table only for EqName "Norsk Hydro".
hydro <- bonds %>% select(Symbol, Name) %>% collect(Norsk Hydro)
#' c) Download the bonds table only for EqName "Norsk Hydro".
hydro <- bonds %>% select(Symbol, Name) %>% collect(Norsk_Hydro)
unique(hydro$Name)
hydro %>% filter(Name == "Norsk Hydro")
View(hydro)
View(hydro)
#' c) Download the bonds table only for EqName "Norsk Hydro".
hydro <- bonds %>% select(Symbol, Name) %>% collect(bonds, name = "Norsk Hydro")
unique(hydro$Name)
hydro %>% filter(Name == "Norsk Hydro")
View(hydro)
#' d) Fix the dates (hint: use lubridate package). Remove any duplicate dates.
bonds$Date <- as.Date(hydro, "%Y/%m/%d") %>%
unique(hydro)
#' d) Fix the dates (hint: use lubridate package). Remove any duplicate dates.
library(lubridate)
bonds$Date <- as.Date(hydro, "%Y/%m/%d") %>%
unique(hydro)
bonds$Date <- as.Date(hydro, "%Y/%m/%d") %>%
unique(hydro)
library(tidyverse)
library(tidyverse)
library(dplyr)
library(ggplot2)
setwd(C:\Users\mariu\Documents\Skole\5. Semester\BED-2056 introduction to dataciense\Arbeidskrav\Task_4)
setwd(C:/Users/mariu/Documents/Skole/5. Semester/BED-2056 introduction to dataciense/Arbeidskrav/Task_4)
setwd("C:/Users/mariu/Documents/Skole/5. Semester/BED-2056 introduction to dataciense/Arbeidskrav/Task_4")
datafil <- read.csv(storedata.csv)
datafil <- read.csv("storedata.csv")
datafil$Order_Date=as.Date(datafil$Order_Date, "%Y-%m-%d")
datafil2017 <- datafil%>%filter("Order_Date ==2017")
library(lubridate)
datafil$Order_Date=as.Date(datafil$Order_Date, "%Y-%m-%d")
datafil2017 <- datafil%>%filter(Order_Date >= 2017-10-01, Order_Date >=)
setwd("C:/Users/mariu/Documents/Skole/5. Semester/BED-2056 introduction to dataciense/Arbeidskrav/Task_4")
datafil <- read.csv("storedata.csv")
datafil$Order_Date=as.Date(datafil$Order_Date, "%Y-%m-%d")
datafil2017 <- datafil%>%filter(Order_Date >= 2017-10-01, Order_Date >=)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(lubridate)
setwd("C:/Users/mariu/Documents/Skole/5. Semester/BED-2056 introduction to dataciense/Arbeidskrav/Task_4")
datafil <- read.csv("storedata.csv")
datafil$Order_Date=as.Date(datafil$Order_Date, "%Y-%m-%d")
datafil2017 <- datafil%>%filter(Order_Date >= 2017-10-01, Order_Date >=)
datafil2017 <- datafil%>%filter(Order_Date >= 2017-10-01, Order_Date <= 2017-12-30)
View(datafil2017)
Region <- datafil%>%
filter(Region=="Region 1")
View(Region)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9"))
View(Region)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))
View(Region)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date(Order_Date >= "2017-10-01" , <= "2017-12-30"))
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date(Order_Date >= "2017-10-01"))
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01" , <= "2017-12-30")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= 2017-10-01 , <= 2017-12-30)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= 2017-10-01 <= 2017-12-30)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01" <= "2017-12-30")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01" <= "2017-12-30"))
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01", <= "2017-12-30"))
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01", <= "2017-12-30")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= 2017-10-01, <= 2017-12-30)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= 2017-10-01, <= 2017-12-05)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, date >= "2017-10-01", <= "2017-12-05")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, Order_Date >= "2017-10-01", <= "2017-12-05")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date, Order_Date >= "2017-10-01", Order_Date<= "2017-12-05")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date >= "2017-10-01", Order_Date<= "2017-12-05")
View(Region)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date >= "2017-10-01", Order_Date<= "2017-12-30")
View(Region)
View(Region)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date >= "2017-10-01", Order_Date<= "2017-12-30")
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))
Region <- filter(Order_Date >= "2017-10-01", Order_Date<= "2017-12-30")
target <- datafil$Order_Date%>%
filter(Order_Date >= "2017-10-01", Order_Date <= "2017-12-30")
target <- datafil$Order_Date%>%
filter(Order_Date >= "2017-10-02", Order_Date <= "2017-12-30")
target <- datafil$Order_Date%>%filter(Order_Date >= "2017-10-02", Order_Date <= "2017-12-30")
target <- datafil$Order_Date %>%
filter(Order_Date >="2017-10-02", Order_Date <="2017-12-30")
library(lubridate)
Region <- datafil%>%
filter(Region==c("Region 1" , "Region 9")) %>%
filter(Customer_Segment == c("Corporate" , "Consumer"))%>%
filter(Order_Date >= "2017-10-01", Order_Date<= "2017-12-30")
View(Region)
View(datafil)
Totalsalg <- Region %>%
group_by(Order_Date, Region, Customer_Segment, Sales) %>%
summarize(toaltsales=Sales)
View(Totalsalg)
